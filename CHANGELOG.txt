RANDOM BEANS CHANGELOG
===================================
https://github.com/benas/random-beans

Changes in version 3.2.0 (2016-07-10)
-------------------------------------

# New features

* issue #156: Add possibility to exclude field annotated with a custom annotation
* issue #160: `FieldDefinition` should be more flexible
* issue #166: add `overrideDefaultInitialization` parameter

# API changes and improvements

* issue #171:
   Deprecated constructor `JodaTimeDateTimeRangeRandomizer(Date min, Date max, long seed)`
   Deprecated constructor `JodaTimeLocalDateRangeRandomizer(Date min, Date max, long seed)`
   Deprecated constructor `JodaTimeLocalDateTimeRangeRandomizer(Date min, Date max, long seed)`

# Fixed Bugs

* issue #153: Exception when randomizing collection with type variable generics
* issue #169: Default field initialization should not be overridden
* issue #171: Joda time range randomizers must take Joda time types as parameters (not java.util.Date)
* issue #175: Unable to register parameters through Spring factory bean

Changes in version 3.1.0 (2016-06-11)
-------------------------------------

# New features

* issue #136: add `maxCollectionSize` parameter
* issue #140: add `maxStringLength` parameter
* issue #141: add `charset` parameter
* issue #142: add `dateRange` parameter
* issue #144: add `timeRange` parameter

# API changes and improvements

* issue #134:
 * Deprecate method `random(Class, int, String...)` in `EnhancedRandom`
 * Add method `randomStreamOf(Class, int, String...)` in `EnhancedRandom`
 * Add method `randomListOf(Class, int, String...)` in `EnhancedRandom`
 * Add method `randomSetOf(Class, int, String...)` in `EnhancedRandom`
 * Add method `randomCollectionOf(Class, int, String...)` in `EnhancedRandom`
* issue #130: add `@RandomizerArgument` annotation

# Fixed Bugs

* issue #131: InstantiationException when providing a randomizer without default constructor in `@Randomizer`
* issue #135: Unable to exclude `java.time.Instant` from being randomized
* issue #145: `StringRandomizer` should generate strings with random length

Changes in version 3.0.0 (2016-05-07)
-------------------------------------

# Major Changes

* Random Beans now requires a Java 1.8+ runtime.
* Module `random-beans-java8` has been merged into the core module `random-beans` (#88)

# New features

#28: add ability to use Java 8 `Supplier` as randomizer
#41: add support for Java 8 Date and Time API (JSR 310) types
#118: Allow more controll over generated values
#102: Added more randomizers: `LocaleRandomizer`, `UUIDRandomizer`, `GregorianCalendarRandomizer`, `TimeZoneRandomizer`, `RegularExpressionRandomizer`
#124: Integrate Lombok to reduce boilerplate code

# API changes and improvements

#78: Make the constructor of `EnhancedRandomBuilder` public
#82: Add support to register a `Randomizer` for a given type
#112: Add Spring support to register a custom randomizer for a given type
#116: Add static factory method to generate random beans with default configuration parameters
#117: rename `nextObjects` method into `objects` to conform with the standard `java.util.Random` API naming pattern
#120: Merge `StringLengthRandomizer` and `StringRandomizer`
#110: Merge `NameRandomizer` and `FullNameRandomzier`

# Fixed Bugs

#84: "Pre-initialized" Bean Fields are nulled
#86: Exception if java-faker does not support default locale
#113: Empty first Collection when no seed is provided
#121 User defined Collection/Map types are not populated

Changes in version 2.0.0 (2016-02-19)
-------------------------------------

# Major changes

* The project has been renamed from `jPopulator` to `Random Beans`
* The `Populator` interface has been renamed to `EnhancedRandom`
* The `PopulatorBuilder` class has been renamed to `EnhancedRandomBuilder`
* The `Populator.populateBean(Class type)` method has been renamed to `EnhancedRandom.nextObject(Class type)`
* Java 7 is the minimum Java version required for v2.x line

# Features

* issue #19: Add support to populate arrays and collection types
* issue #24: Add support to exclude subfields using the dotted notation
* issue #25: Add support to populate immutable objects
* issue #30: Add random seed parameter
* issue #32: Add the `RandomizerRegistry` API as a SPI to register custom randomizers
* issue #33: Add support for recursive data structures
* issue #36: Add support to register randomizers using the `@Randomizer` annotation
* issue #59: Add support to scan the classpath for concrete types when the field is an abstract or interface type
* issue #61: Add support to skip fields using the `SkipRandomizer` API

# Bug fixes

* issue #37: Fix incorrect error message in `MapRandomizer`
* issue #44: Fix `StackOverflowError` when a field is of the same type as declaring class (infinite recursion)
* issue #56: Fix regression of #1 , Random Beans should not try to populate static final fields

# Enhancements

* issue #39: Throw an `ObjectGenerationException` when unable to randomize a field instead of silently ignoring it
* issue #26: Modularisation of the code base
* issues #45 #48 #52: Several test improvements

Changes in version 1.2.0 (2015-03-20)
-------------------------------------

* Merged PR #18: add support for populating Joda time types
* Fixed issue #20: add @Exclude annotation to exclude fields from being populated
* Fixed issue #21: add support for using jPopulator as a Spring bean
* Fixed issue when populating not supported collection types
* Implemented feature #22: add support for populating java.net.URI and java.net.URL types
* Added randomizers for java.util.Queue and java.util.Map
* Refactored tests to use fluent assertions with assertj

Changes in version 1.1.0 (2014-12-21)
-------------------------------------

* Fixed issue #3: add a randomizer to populate a list of elements
* Fixed issue #5: add an optional randomizer
* Fixed issue #7: generate data according to bean validation api annotations
* Fixed issue #9: add the ability to exclude some fields
* Fixed issue #11: jPopulator generates strange java.util.Date values. Dates are now generated in last/next 10 years
* Fixed issue #12: DataRangeRandomizer does not generate date within specified range
* Fixed issue #15: add randomizer for numeric strings
* Fixed issue #16: add randomizer of date with string representation and possible formatting
* Refactored tests and improved test coverage
* Improved documentation
* Updated Javadoc

Changes in version 1.0.1 (2014-06-09)
-------------------------------------

* Improved API using generics (merged pull request #2)
* Fixed issue #1 : unable to populate a Serializable class
* Fixed issue #2 : java.lang.StackOverflowError in PopulatorImpl.populateBeans
* Updated documentation and Javadoc

Changes in version 1.0.0 (2013-12-23)
-------------------------------------

* Initial core API and Implementation
* Common randomizers